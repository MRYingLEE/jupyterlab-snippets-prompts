#!/usr/bin/env python3
""" perform a development install of code_snippet

    On Binder, this will run _after_ the environment has been fully created from
    the environment.yml in this directory.

    This script should also run locally on Linux/MacOS/Windows:

        python3 binder/postBuild
"""
import subprocess
import sys
from pathlib import Path


ROOT = Path.cwd()

print("Current Working dir:", ROOT)

def _(*args, **kwargs):
    """ Run a command, echoing the args

        fails hard if something goes wrong
    """
    print("\n\t", " ".join(args), "\n")
    return_code = subprocess.call(args, **kwargs)
    if return_code != 0:
        print("\nERROR", return_code, " ".join(args))
        sys.exit(return_code)

# verify the environment is self-consistent before even starting
# _(sys.executable, "-m", "pip", "check")

# install the labextension
_(sys.executable, "-m", "pip", "install", "-e", ".")

# verify the environment the extension didn't break anything
# _(sys.executable, "-m", "pip", "check")

# list the extensions
# _("jupyter", "server", "extension", "list")

# initially list installed extensions to determine if there are any surprises
# _("jupyter", "labextension", "list")

print("JupyterLab with code_snippet is ready to run with:\n")
print("\tjupyter lab\n")

# remove unnecessary directories when using the binder
_('rm', '-rf', './lib')
_('rm', '-rf', './src')
_('rm', '-rf', './style')
_('rm', '-rf', './_temp_extension')
_('rm', '-rf', './Design')
_('rm', '-rf', './binder')
_('rm', '-rf', './docs')
_('rm', '-rf', './code_snippet')
_('rm', '-rf', './code_snippet.egg-info')
_('rm', '-rf', './schema')
_('rm', '-rf', './node_modules')
_('rm', './install.json')
_('rm', './package.json')
_('rm', './PROGRESS.md')
_('rm', './setup.py')
_('rm', './pyproject.toml')
_('rm', './tsconfig.json')
_('rm', './tsconfig.tsbuildinfo')
_('rm', './yarn.lock')
_('rm', './MANIFEST.in')
